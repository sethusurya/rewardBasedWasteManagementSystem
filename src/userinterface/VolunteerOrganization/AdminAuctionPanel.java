/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.VolunteerOrganization;

import Business.EcoSystem;
import Business.Order.Order;
import Business.Order.OrderDirectory;
import Business.UserAccount.UserAccount;
import Business.VU.VU_Company;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sethu
 */
public class AdminAuctionPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdminAuctionPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccount account;
    VU_Company company;
    public AdminAuctionPanel(JPanel userProcessContainer,EcoSystem ecosystem, UserAccount account, VU_Company company) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.account = account;
        this.company = company;
        
        populateTables(ecosystem.getOrderDirectory());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSegregardWaste = new javax.swing.JLabel();
        lblAuctionedWaste = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblAuctionArea = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSegregated = new javax.swing.JTable();
        btnConductAuction = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAuctioned = new javax.swing.JTable();

        lblSegregardWaste.setText("Segregated Waste");

        lblAuctionedWaste.setText("Donated Waste List");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblAuctionArea.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAuctionArea.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAuctionArea.setText("ADMIN TASK QUEUE");

        jTableSegregated.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Orderid", "Type of Waste", "Quantity(lbs)", "TimeStamp", "Reported By"
            }
        ));
        jScrollPane1.setViewportView(jTableSegregated);

        btnConductAuction.setText("Donate Waste");
        btnConductAuction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConductAuctionActionPerformed(evt);
            }
        });

        jTableAuctioned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Orderid", "Type of Waste", "Quantity(lbs)", "TimeStamp", "Status"
            }
        ));
        jScrollPane2.setViewportView(jTableAuctioned);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(lblAuctionArea, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblAuctionedWaste)
                        .addComponent(lblSegregardWaste)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnConductAuction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btnBack)
                .addGap(18, 18, 18)
                .addComponent(lblAuctionArea)
                .addGap(26, 26, 26)
                .addComponent(lblSegregardWaste)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(lblAuctionedWaste))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConductAuction)
                        .addGap(24, 24, 24)
                        .addComponent(btnDelete)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        goBack();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTableSegregated.getSelectedRow();
        if (selectedRowIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) jTableSegregated.getModel();
            Order selectedRow = (Order) model.getValueAt(selectedRowIndex, 0);
            if (!selectedRow.getStatus().equals("reported")) {
                JOptionPane.showMessageDialog(this, "Order has been already placed for donation!!");
                return;
            } else {
                int input = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirmation Dialog", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (input == 0) {
                    ecosystem.getOrderDirectory().removeOrderById(selectedRow.getId()); // remove the order from echosystem
                    refreshData();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select an order row to delete it");
            return;
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnConductAuctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConductAuctionActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTableSegregated.getSelectedRow();
        if (selectedRowIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) jTableSegregated.getModel();
            Order selectedOrder = (Order) model.getValueAt(selectedRowIndex, 0);
            selectedOrder.setStatus("out for auction");
            refreshData();
        } else {
            JOptionPane.showMessageDialog(this,"Select an Order to conduct auction"); // status change
            return;
        }
    }//GEN-LAST:event_btnConductAuctionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConductAuction;
    private javax.swing.JButton btnDelete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAuctioned;
    private javax.swing.JTable jTableSegregated;
    private javax.swing.JLabel lblAuctionArea;
    private javax.swing.JLabel lblAuctionedWaste;
    private javax.swing.JLabel lblSegregardWaste;
    // End of variables declaration//GEN-END:variables

private void populateTables(OrderDirectory orderDirectory) {
        DefaultTableModel model1 = (DefaultTableModel) jTableSegregated.getModel();
        DefaultTableModel model2 = (DefaultTableModel) jTableAuctioned.getModel();
        model1.setRowCount(0);
        model2.setRowCount(0);
        
        for (Order o: orderDirectory.getOrderList()){
            if (o.getReportingCompanyId() == company.getId() && o.getIsReportedByVolunteer()) {
                if(o.getStatus().equals("reported")) { // only reported status will be shown here
                    Object[] row1 = new Object[5];
                    row1[0] = o;
                    row1[1] = o.getWasteType();
                    row1[2] = o.getQuantity();
                    row1[3] = o.getReportingTimeStamp();
                    row1[4] = o.getReportingUsername();

                    model1.addRow(row1);
                } else {
                    Object[] row2 = new Object[5];
                    row2[0] = o;
                    row2[1] = o.getWasteType();
                    row2[2] = o.getQuantity();
                    row2[3] = o.getReportingTimeStamp();
                    row2[4] = o.getStatus();

                    model2.addRow(row2);
                }
            }
        }
    }

    private void refreshData() {
        populateTables(ecosystem.getOrderDirectory());
    }

    private void goBack() {
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer); 
    }
}

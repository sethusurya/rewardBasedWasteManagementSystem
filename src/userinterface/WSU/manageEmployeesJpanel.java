/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.WSU;

import Business.EcoSystem;
import Business.Role.Role;
import Business.Role.WSU_Employee;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import Business.WSU.WSU_Company;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author varunvuppala
 */
public class manageEmployeesJpanel extends javax.swing.JPanel {
    
    /**
     * Creates new form manageManagersJpanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    WSU_Company company;
    public manageEmployeesJpanel(JPanel userProcessContainer,EcoSystem ecosystem, WSU_Company company) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.company = company;
        
        txtRole.setEnabled(false);
        txtRole.setText("WSU_Employee");
        populateTable(ecosystem.getUserAccountDirectory(), company.getEmployeesList());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtRole = new javax.swing.JTextField();
        lblUserName = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Username", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 520, 170));

        jLabel1.setFont(new java.awt.Font("Helvetica", 1, 13)); // NOI18N
        jLabel1.setText("Role:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 330, -1, 20));

        txtRole.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        add(txtRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 330, 160, -1));

        lblUserName.setFont(new java.awt.Font("Helvetica", 1, 13)); // NOI18N
        lblUserName.setText("UserName:");
        add(lblUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 363, -1, 30));

        txtUserName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        add(txtUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 370, 160, -1));

        lblPassword.setFont(new java.awt.Font("Helvetica", 1, 13)); // NOI18N
        lblPassword.setText("Password:");
        add(lblPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 410, 70, 20));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 470, 93, -1));

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 80, 94, -1));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 210, 94, -1));

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 90, -1));

        title.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("MANAGE EMPLOYEES");
        add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 260, 27));

        txtPassword.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 410, 160, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/images/WSU_800x600.png"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        goBack();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        Boolean editFlag = !txtUserName.isEnabled();
        if(txtUserName.getText().length() <= 2) {
            JOptionPane.showMessageDialog(this, "Username should be atleast 2 characters!!", null,JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtPassword.getPassword().length <= 2) {
            JOptionPane.showMessageDialog(this, "Password should be atleast 2 characters!!", null,JOptionPane.ERROR_MESSAGE);
            return;
        }
        String username = txtUserName.getText();
        char[] passwordArr = txtPassword.getPassword();
        String password = new String(passwordArr);
        Role role = new WSU_Employee();
        if (editFlag) {
            UserAccount ua = ecosystem.getUserAccountDirectory().getUserAccountByUserName(username);
            if (ua != null) ua.setPassword(password);
            clearInputs();
            refreshData();
        } else {
            // check for unique userName and add user
            if (ecosystem.getUserAccountDirectory().checkIfUsernameIsUnique(username)) {
                ecosystem.getUserAccountDirectory().createUserAccount(username, password, null, role); // useraccount created

                // add userName to employeeList in company
                ArrayList<String> newEmployeeList = company.getEmployeesList();
                newEmployeeList.add(username);
                company.setEmployeesList(newEmployeeList); // adding username to list
                refreshData();
                clearInputs();
            } else {
                JOptionPane.showMessageDialog(this, "Username already exists");
                return;
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = table.getSelectedRow();
        if (selectedRowIndex >= 0){
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            UserAccount selectedRowData = (UserAccount) model.getValueAt(selectedRowIndex, 0);
            txtUserName.setText(selectedRowData.getUsername());
            txtPassword.setText(selectedRowData.getPassword());
            
            txtUserName.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Select a row to modify");
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = table.getSelectedRow();
        if (selectedRowIndex >= 0){
            int input = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirmation Dialog", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (input == 0) {
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                UserAccount selectedRowData = (UserAccount) model.getValueAt(selectedRowIndex, 0);
                String username = selectedRowData.getUsername();
                company.getEmployeesList().remove(username); // remove employee from the company
                ecosystem.getUserAccountDirectory().getUserAccountList().remove(selectedRowData); // remove userAccount from the userAccount directory
                clearInputs();
                refreshData();
                JOptionPane.showMessageDialog(this, "Delete Success");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a user to delete");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTable table;
    private javax.swing.JLabel title;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtRole;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    private void goBack() {
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);        
    }

    private void clearInputs() {
        txtUserName.setText("");
        txtPassword.setText("");
        txtUserName.setEnabled(true);
    }

    private void refreshData() {
        populateTable(ecosystem.getUserAccountDirectory(), company.getEmployeesList());
    }

    private void populateTable(UserAccountDirectory userAccountDirectory, ArrayList<String> employeesList) {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel)table.getModel();
        model.setRowCount(0);
        
        // loopthrough userName
        ArrayList<UserAccount> companyEmployeeList = new ArrayList<UserAccount>();
        for (String s: employeesList){
            UserAccount newUserAccount = userAccountDirectory.getUserAccountByUserName(s);
            if (newUserAccount != null) {
                companyEmployeeList.add(newUserAccount);
            }
        }
        
        for (UserAccount ua: companyEmployeeList){
           Object[] row = new Object[2];
           row[0] = ua;
           row[1] = ua.getRole();
           
           model.addRow(row);
        }
    }

}
